<html>
<head>
	<title>Squares</title>

	<link href='http://fonts.googleapis.com/css?family=Bubbler+One' rel='stylesheet' type='text/css'>

	<link rel='stylesheet' href='css/styles.css' type='text/css'></link>

</head>
<body>

	<div id="config-bar">
		<div id='config-content'>
			<p id='config-text'>config</p>
			<table id='config-table' class='hidden'>
				<tr>
				<td>
					<a href="/piano.htm">piano</a>
				</td>
				</tr>
			</table>
		</div>
	</div>

	<div id="gen-piano">
		<table>
			<tr>
				<td> &nbsp; </td>
				<td id="gen-key-c#"> c# </td>
				<td> &nbsp; </td>
				<td id="gen-key-d#"> d# </td>
				<td> &nbsp; </td>
				<td> &nbsp; </td>
				<td id="gen-key-f#"> f# </td>
				<td> &nbsp; </td>
				<td id="gen-key-g#"> g# </td>
				<td> &nbsp; </td>
				<td id="gen-key-a#"> a# </td>
				<td> &nbsp; </td>
			</tr>
			<tr>
				<td id="gen-key-c"> c </td>
				<td> &nbsp; </td>
				<td id="gen-key-d"> d </td>
				<td> &nbsp; </td>
				<td id="gen-key-e"> e </td>
				<td id="gen-key-f"> f </td>
				<td> &nbsp; </td>
				<td id="gen-key-g"> g </td>
				<td> &nbsp; </td>
				<td id="gen-key-a"> a </td>
				<td> &nbsp; </td>
				<td id="gen-key-b"> b </td>
			</tr>
		</table>
	</div>

	<div id="notes">
		<p>here's some contrapuntally generated notes from a theme in C</p>
	</div>
	<li id="keyboard_help" class="hidden"><a href="#"></a></li>
	<div id="content">
		<p>play along using the highlighted notes above!</p>
		<p id="help">how?</p>
		<p id="help">halp?</p>
	</div>

	<div id="piano">
		<table>
			<tr>
				<td> &nbsp; </td>
				<td id="key-c#"> c# </td>
				<td> &nbsp; </td>
				<td id="key-d#"> d# </td>
				<td> &nbsp; </td>
				<td> &nbsp; </td>
				<td id="key-f#"> f# </td>
				<td> &nbsp; </td>
				<td id="key-g#"> g# </td>
				<td> &nbsp; </td>
				<td id="key-a#"> a# </td>
				<td> &nbsp; </td>
			</tr>
			<tr>
				<td id="key-c"> c </td>
				<td> &nbsp; </td>
				<td id="key-d"> d </td>
				<td> &nbsp; </td>
				<td id="key-e"> e </td>
				<td id="key-f"> f </td>
				<td> &nbsp; </td>
				<td id="key-g"> g </td>
				<td> &nbsp; </td>
				<td id="key-a"> a </td>
				<td> &nbsp; </td>
				<td id="key-b"> b </td>
			</tr>
		</table>
	</div>

</body>


<script src="http://code.jquery.com/jquery-latest.min.js" type="text/javascript"></script>
<script src="http://code.jquery.com/ui/1.10.3/jquery-ui.min.js"></script>
<script src="libs/timbre.js" type="text/javascript"></script>
<script src="libs/subcollider.js" type="text/javascript"></script>
<script src="js/keyboard.js" type="text/javascript"></script>
<script src="js/counterpoint.js" type="text/javascript"></script>

<script type="text/javascript">

	$(document).ready(function() {

		startTheMusic();

		var noteMap = new Object();
		noteMap[0] = "c";
		noteMap[1] = "c\\#";
		noteMap[2] = "d";
		noteMap[3] = "d\\#";
		noteMap[4] = "e";
		noteMap[5] = "f";
		noteMap[6] = "f\\#";
		noteMap[7] = "g";
		noteMap[8] = "g\\#";
		noteMap[9] = "a";
		noteMap[10] = "a\\#";
		noteMap[11] = "b";

		var LOOP = true;

		function animateKey(key, on) {
			$(key).animate({
				opacity: 0.75,
				color: "white",
				backgroundColor: "red"
			}, 1000)
		}

		function animateOpacity(v, on) {
			if (on) {
				$(v).animate({
					opacity: 1
				}, 600);
			} else {
				$(v).animate({
					opacity: 0
				}, 200);
			}
		}

		// adjust pianos
		$('#gen-piano td').width($(document).width() / 12);
		$('#gen-piano td').height($(document).height() / 10 );
		$('#piano td').width($(document).width() / 12);
		$('#piano td').height($(document).height() / 10 );

		var keyboard_help = $('#keyboard_help');
		keyboard_help.css('left', ($(document).width() / 2) - (keyboard_help.width() / 2));
		var content = $('#content');
		content.css('left', ($(document).width() / 2) - (content.width() / 2));

		$(window).resize(function() {

			// adjust pianos
			$('#gen-piano td').width($(document).width() / 12);
			$('#gen-piano td').height($(document).height() / 10 );
			$('#piano td').width($(document).width() / 12);
			$('#piano td').height($(document).height() / 10 );

			keyboard_help.css('left', ($(document).width() / 2) - (keyboard_help.width() / 2));
			content.css('left', ($(document).width() / 2) - (content.width() / 2));

		});

		var s = 'theme: ';
		for (n in cantusNotes) {
			if (n < SONG_LENGTH) {
				s += noteMap[cantusNotes[n] % 12].replace('\\#','#') + " ";
			}
		}
		$(content.children()[0]).html(s);
		s = 'species one counterpoint: ';
		for (n in speciesOneNotes) {
			if (n < SONG_LENGTH) {
				s += noteMap[speciesOneNotes[n] % 12].replace('\\#','#') + " ";
			}
		}
		$(content.children()[1]).html(s);
		s = 'species two counterpoint: ';
		for (n in speciesTwoNotes) {
			if (n < SONG_LENGTH) {
				s += noteMap[speciesTwoNotes[n][0] % 12].replace('\\#','#') + " ";
				s += noteMap[speciesTwoNotes[n][1] % 12].replace('\\#','#') + " ";
			}
		}
		$(content.children()[2]).html(s);

		if (minor) {
			$($('#notes').children()[0]).html('here\'s some contrapuntally generated notes from a theme in C minor');
		}

		var bar = $('#config-bar');
		var config_text = $($(bar.children()[0]).children()[0]);
		var config_table = $($(bar.children()[0]).children()[1]);
		var submit = $('#submit');

		bar.click(function () {

			if (!bar.hasClass('click')) {
				bar.addClass('click');
				animateOpacity(config_text, false);
				animateOpacity(config_table, true);
				bar.animate(
					{ 'top': '-=20%' },
					350,
					'swing'
				);
			}

		});

		submit.click(function() {

			animateOpacity(config_table, false);
			animateOpacity(config_text, true);
			bar.animate(
				{ 'top': '+=20%' },
				450,
				'swing',
				function() {
					bar.removeClass('click');
				}
			);

		});

		timbre.rec(function(output) {

			var msec  = timbre.timevalue("bpm140 l16");
			var synth = T("OscGen", {env:T("perc", {r:msec, ar:true})});

			T("interval", {interval:msec}, function(count) {
				if (count < cantusNotes.length) {
					synth.noteOn(cantusNotes[count], 100);
					animateKey($('#gen-piano').find('#gen-key-'+noteMap[cantusNotes[count] % 12]), true);
					animateKey($('#piano').find('#key-'+noteMap[speciesOneNotes[count] % 12]), true);
				} else {
					output.done();
				}
			}).start();

			T("interval", {interval:msec}, function(count) {
				if (count < speciesOneNotes.length) {
					synth.noteOn(speciesOneNotes[count], 100);
					animateKey($('#piano').find('#key-'+noteMap[speciesOneNotes[count] % 12]), true);
				} else {
					output.done();
				}
			}).start();

			T("interval", {interval:msec}, function(count) {
				if (count < speciesTwoNotes.length) {
					synth.noteOn(speciesTwoNotes[count][0], 50);
					synth.noteOn(speciesTwoNotes[count][1], 50);
				} else {
					output.done();
				}
			}).start();

			output.send(synth);

		}).then(function(result) {

			var L = T("buffer", {buffer:result, loop:LOOP});
			var R = T("buffer", {buffer:result, loop:LOOP});

			var num = 400;
			var duration = L.duration;

			R.pitch = (duration * (num - 1)) / (duration * num);

			T("delay", {time:"bpm140 l1", fb:0.1, cross:true},
				T("pan", {pos:-0.5}, L), T("pan", {pos:+0.5}, R)
			).play();

		});

	});

</script>



</html>
